#include <iostream>
#include <sstream>
#include <string>
#include <mysql.h>
#include <mutex>
#include <ctime>
#include <iomanip>
#include <openssl/evp.h>
#include <openssl/rand.h>

using namespace std;

// Mutex for thread safety (for potential future use)
mutex mtx;

// Function to encrypt a PIN
string encrypt_pin(const string &pin) {
    // Simple XOR encryption (for demonstration purposes)
    string key = "simplekey";  // In real applications, use a stronger key
    string encrypted_pin(pin.size(), '\0');
    for (size_t i = 0; i < pin.size(); ++i) {
        encrypted_pin[i] = pin[i] ^ key[i % key.size()];
    }
    return encrypted_pin;
}

// Function to decrypt a PIN
string decrypt_pin(const string &encrypted_pin) {
    return encrypt_pin(encrypted_pin);  // XOR is symmetric
}

// Function to generate a random key (for demonstration purposes)
string generate_random_key(size_t length) {
    string key(length, '\0');
    RAND_bytes(reinterpret_cast<unsigned char*>(&key[0]), length);
    return key;
}

int account_generator(MYSQL* conn, const string &email) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    MYSQL_ROW row;
    MYSQL_RES* res;
    int qstate;
    ss << "SELECT account_no, email FROM users";
    string query = ss.str();
    const char* q = query.c_str();
    qstate = mysql_query(conn, q);
    if (qstate == 0) {
        res = mysql_store_result(conn);
        while ((row = mysql_fetch_row(res))) {
            if (email == row[1]) {
                return stoi(row[0]);
            }
        }
    }
    return 0;
}

int account_validator(MYSQL* conn, int acc) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    MYSQL_RES* res;
    MYSQL_ROW row;
    int qstate;
    ss << "SELECT account_no FROM users";
    string query = ss.str();
    const char* q = query.c_str();
    qstate = mysql_query(conn, q);
    if (qstate == 0) {
        res = mysql_store_result(conn);
        while ((row = mysql_fetch_row(res))) {
            if (acc == stoi(row[0])) {
                return 1;
            }
        }
    }
    return 0;
}

// Function to create an account
void createaccount(MYSQL* conn) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    string name, address, email, password;
    char phone[20];
    int balance;
    cout << "\nEnter Your Name: ";
    cin.ignore();
    getline(cin, name);
    cout << "\nEnter Mobile Number: ";
    cin >> phone;
    cout << "\nEnter Your Address: ";
    cin.ignore();
    getline(cin, address);
    cout << "\nEnter Amount To Deposit: ";
    cin >> balance;
    balance = max(balance, 0);  // Ensure non-negative balance
    cout << "\nEnter Email Address: ";
    cin >> email;
    transform(email.begin(), email.end(), email.begin(), ::tolower);
    cout << "\nEnter Password: ";
    cin >> password;

    ss << "INSERT INTO users (name, phoneno, address, balance, email, password) VALUES ('" 
       << name << "', '" << phone << "', '" << address << "', " << balance << ", '" 
       << email << "', '" << password << "')";
    string query = ss.str();
    const char* q = query.c_str();
    int qstate = mysql_query(conn, q);
    if (qstate == 0) {
        cout << "Account Created Successfully" << endl;
    } else {
        cout << "Error creating account: " << mysql_error(conn) << endl;
    }
}

int loginaccount(MYSQL* conn, const string &email, const string &password) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    MYSQL_ROW row;
    MYSQL_RES* res;
    int qstate;
    ss << "SELECT account_no, email, password FROM users";
    string query = ss.str();
    const char* q = query.c_str();
    qstate = mysql_query(conn, q);
    if (qstate == 0) {
        res = mysql_store_result(conn);
        while ((row = mysql_fetch_row(res))) {
            if (email == row[1] && password == row[2]) {
                cout << "Login Successful" << endl;
                return stoi(row[0]);
            }
        }
        cout << "Invalid Username/password" << endl;
    } else {
        cout << "Login query error: " << mysql_error(conn) << endl;
    }
    return 0;
}

void display_details(MYSQL* conn, int acc) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    MYSQL_ROW row;
    MYSQL_RES* res;
    int qstate;
    ss << "SELECT account_no, name FROM users";
    string query = ss.str();
    const char* q = query.c_str();
    qstate = mysql_query(conn, q);
    if (qstate == 0) {
        res = mysql_store_result(conn);
        while ((row = mysql_fetch_row(res))) {
            if (acc == stoi(row[0])) {
                cout << "\t\t\t\t<<<-----------------WELCOME " << row[1] << "------------------>>>" << endl;
                cout << "\t \t \t \t \t \t Your ACCOUNT NUMBER: " << acc << endl;
                cout << "\t \t \t \tFirst create a new pin, If your account is new" << endl;
            }
        }
    } else {
        cout << "Error displaying details: " << mysql_error(conn) << endl;
    }
}

int pin_generate(MYSQL* conn, int acc, const string &pin) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    MYSQL_ROW row;
    MYSQL_RES* res;
    int qstate;
    ss << "SELECT pin, account_no FROM mpin";
    string query = ss.str();
    const char* q = query.c_str();
    qstate = mysql_query(conn, q);
    if (qstate == 0) {
        res = mysql_store_result(conn);
        while ((row = mysql_fetch_row(res))) {
            if (acc == stoi(row[1])) {
                string stored_pin = decrypt_pin(row[0]);
                if (stored_pin == pin) {
                    return 1;  // Correct PIN
                } else {
                    return 2;  // Incorrect PIN
                }
            }
        }
        return 0;  // PIN not found
    } else {
        cout << "PIN query error: " << mysql_error(conn) << endl;
        return 0;
    }
}

int create_pin(MYSQL* conn, int acc) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    int pin;
    cout << "Enter a 4 digit pin: ";
    cin >> pin;
    if (pin < 1000 || pin > 9999) {
        cout << "Enter Valid Input" << endl;
        return 0;
    }
    string pin_str = to_string(pin);
    if (pin_generate(conn, acc, pin_str) == 0) {
        ss << "INSERT INTO mpin (pin, account_no) VALUES ('" << encrypt_pin(pin_str) << "', " << acc << ")";
        string query = ss.str();
        const char* q = query.c_str();
        int qstate = mysql_query(conn, q);
        if (qstate == 0) {
            return 1;
        } else {
            cout << "Error creating PIN: " << mysql_error(conn) << endl;
            return 0;
        }
    } else {
        cout << "Pin already exists for this account number" << endl;
        return 0;
    }
}

int bal_validate(MYSQL* conn, int acc, int transfer) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    MYSQL_ROW row;
    MYSQL_RES* res;
    int qstate;
    ss << "SELECT balance FROM users WHERE account_no = " << acc;
    string query = ss.str();
    const char* q = query.c_str();
    qstate = mysql_query(conn, q);
    if (qstate == 0) {
        res = mysql_store_result(conn);
        row = mysql_fetch_row(res);
        int bal = stoi(row[0]);
        if (bal >= transfer) {
            return 1;
        } else {
            return 2;
        }
    } else {
        cout << "Balance query error: " << mysql_error(conn) << endl;
        return 0;
    }
}

void transfer_money(MYSQL* conn, int acc) {
    lock_guard<mutex> lock(mtx);
    stringstream ss, ss1, ss2;
    int transfer, to;
    cout << "Enter Amount to Transfer: ";
    cin >> transfer;
    cout << "Enter the Account Number to Transfer: ";
    cin >> to;
    if (bal_validate(conn, acc, transfer) == 1) {
        ss1 << "UPDATE users SET balance = balance - " << transfer << " WHERE account_no = " << acc;
        string query1 = ss1.str();
        const char* q1 = query1.c_str();
        if (mysql_query(conn, q1) == 0) {
            ss2 << "UPDATE users SET balance = balance + " << transfer << " WHERE account_no = " << to;
            string query2 = ss2.str();
            const char* q2 = query2.c_str();
            if (mysql_query(conn, q2) == 0) {
                cout << "Amount Transferred Successfully" << endl;
            } else {
                cout << "Error updating recipient balance: " << mysql_error(conn) << endl;
            }
        } else {
            cout << "Error updating sender balance: " << mysql_error(conn) << endl;
        }
    } else {
        cout << "Insufficient balance" << endl;
    }
}

void withdraw(MYSQL* conn, int acc) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    int withdraw_amount;
    cout << "Enter amount to withdraw: ";
    cin >> withdraw_amount;
    if (bal_validate(conn, acc, withdraw_amount) == 1) {
        ss << "UPDATE users SET balance = balance - " << withdraw_amount << " WHERE account_no = " << acc;
        string query = ss.str();
        const char* q = query.c_str();
        if (mysql_query(conn, q) == 0) {
            cout << "Amount withdrawn successfully" << endl;
        } else {
            cout << "Error withdrawing amount: " << mysql_error(conn) << endl;
        }
    } else {
        cout << "Insufficient balance" << endl;
    }
}

void deposit(MYSQL* conn, int acc) {
    lock_guard<mutex> lock(mtx);
    stringstream ss;
    int deposit_amount;
    cout << "Enter amount to deposit: ";
    cin >> deposit_amount;
    ss << "UPDATE users SET balance = balance + " << deposit_amount << " WHERE account_no = " << acc;
    string query = ss.str();
    const char* q = query.c_str();
    if (mysql_query(conn, q) == 0) {
        cout << "Amount deposited successfully" << endl;
    } else {
        cout << "Error depositing amount: " << mysql_error(conn) << endl;
    }
}

int main() {
    // Initialize MySQL connection (add proper error handling in real application)
    MYSQL* conn;
    conn = mysql_init(0);
    conn = mysql_real_connect(conn, "localhost", "user", "password", "bank_db", 0, NULL, 0);
    if (!conn) {
        cout << "Database connection failed: " << mysql_error(conn) << endl;
        return 1;
    }

    // Example usage
    int choice, acc;
    string email, password;
    cout << "1. Create Account\n2. Login\n3. Exit\n";
    cin >> choice;
    switch (choice) {
        case 1:
            createaccount(conn);
            break;
        case 2:
            cout << "Enter Email: ";
            cin >> email;
            cout << "Enter Password: ";
            cin >> password;
            acc = loginaccount(conn, email, password);
            if (acc) {
                // Account-specific operations
                int op;
                cout << "1. Create PIN\n2. Transfer Money\n3. Withdraw\n4. Deposit\n5. Exit\n";
                cin >> op;
                switch (op) {
                    case 1:
                        create_pin(conn, acc);
                        break;
                    case 2:
                        transfer_money(conn, acc);
                        break;
                    case 3:
                        withdraw(conn, acc);
                        break;
                    case 4:
                        deposit(conn, acc);
                        break;
                    case 5:
                        mysql_close(conn);
                        return 0;
                }
            }
            break;
        case 3:
            mysql_close(conn);
            return 0;
    }

    mysql_close(conn);
    return 0;
}




